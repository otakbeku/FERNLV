'''
Implement EigenFace Classifier Using EigenUtils Class

Step:
 - Split the data:
 the directory should look like this:
-> root_dir:
 --> class_1
 --> class_2
 --> ...

This would produce a base directory consists of:
 -> train_dir
 -> val_dir
 -> test_dir (if available)

 all of train data converted into pickle with this configuration:
 {'eigenface': eigen_face,
  'weight': weight,
  'average': average}

  where eigen_face is the eigenvector of the SVD from train data and,
  weight is the weight that generated by subtracted mean from train data
  and average is the average from train data

For performance measure I haven't made it clear is it just compute the accuracy
It doesn't give any precision nor recall value.
'''
import FERNLV.EigenUtils as eu
import cv2

train_data, train_labels, val_data, val_labels, _, _ = eu.split_data_train_test_val('Dataset', base_dir='base_dir')

eigen_face, weight, average = eu.create_eigen_face_vector(train_data)

test = '.\Assets\\1.JPG'
img = cv2.imread(test, 0)
img_res = cv2.resize(img, (32, 32))
img_res = img_res.flatten()

print(eu.predict(img_res, average, eigen_face, weight, train_labels))
# Performance Measure
eigen_face = eu.load_pickle('.\Assets\eigen_face.pickle')
train_data = eu.load_pickle('.\Assets\\train_vec.pickle')
val_data = eu.load_pickle('.\Assets\\val_vec.pickle')
eu.performance_measure(eigen_face, train_labels=train_data['label'], val_data=val_data['vec'],
                       val_label=val_data['label'])
